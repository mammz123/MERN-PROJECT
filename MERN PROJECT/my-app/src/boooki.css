/* import React, { useState, useEffect } from 'react';
import axios from 'axios';

function Booking1() {
    const [formData, setFormData] = useState({
        YourEvent: '',
        YourLocationForEvent: '',
        EventDate: '',
        StartTime: '',
        EndTime: '',
        ApproximateNumberOfAttendees: '',
        EventSetup: '',
        ColorTheme: '',
        CateringServices: '',
        Name: '',
        Phone: '',
        AlternatePhone: '',
        Email: '',
        Address: '',
        Place: '',
        PaymentMethod: '',
        PaymentDetails: { upiId: '', upiPhoneNumber: '', cardNumber: '', expiryDate: '', cvv: '', cardHolderName: '' },
    });

    const [errorMessage, setErrorMessage] = useState('');
    const [formSubmitted, setFormSubmitted] = useState(false);

    useEffect(() => {
        if (errorMessage) {
            window.alert(errorMessage);
            setErrorMessage('');
        }
    }, [errorMessage]);

    useEffect(() => {
        if (formSubmitted) {
            window.alert('Successfully booked!');
            console.log('Successfully booked:', formData);
            setFormSubmitted(false);
        }
    }, [formSubmitted, formData]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData({
            ...formData,
            [name]: value,
        });
    };

    const handlePaymentDetailsChange = (e) => {
        const { name, value } = e.target;
        setFormData({
            ...formData,
            PaymentDetails: {
                ...formData.PaymentDetails,
                [name]: value,
            },
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            if (!validateForm()) {
                throw new Error('Please fill the form completely.');
            }
            
            await axios.post('http://localhost:3000/create', formData);
            setFormSubmitted(true);
            // Clear form data after successful booking
            setFormData({
                YourEvent: '',
                YourLocationForEvent: '',
                EventDate: '',
                StartTime: '',
                EndTime: '',
                ApproximateNumberOfAttendees: '',
                EventSetup: '',
                ColorTheme: '',
                CateringServices: '',
                Name: '',
                Phone: '',
                AlternatePhone: '',
                Email: '',
                Address: '',
                Place: '',
                PaymentMethod: '',
                PaymentDetails: { upiId: '', upiPhoneNumber: '', cardNumber: '', expiryDate: '', cvv: '', cardHolderName: '' },
            });
        } catch (error) {
            console.error('Error creating event:', error);
            setErrorMessage(error.message);
        }
    };

    const validateForm = () => {
        const { YourEvent, YourLocationForEvent, EventDate, StartTime, EndTime, ApproximateNumberOfAttendees, EventSetup, ColorTheme, CateringServices, Name, Phone, Email, Address, Place, PaymentMethod } = formData;
        const { upiId, upiPhoneNumber, cardNumber, expiryDate, cvv, cardHolderName } = formData.PaymentDetails;

        return YourEvent && YourLocationForEvent && EventDate && StartTime && EndTime && ApproximateNumberOfAttendees && EventSetup && ColorTheme && CateringServices && Name && Phone && Email && Address && Place && PaymentMethod && ((PaymentMethod === 'GPay' && (upiId || upiPhoneNumber)) || (PaymentMethod === 'DebitCard' || PaymentMethod === 'CreditCard') && cardNumber && expiryDate && cvv && cardHolderName);
    };

    const renderPaymentDetails = () => {
        const { PaymentMethod, PaymentDetails } = formData;
        const { upiId, upiPhoneNumber, cardNumber, expiryDate, cvv, cardHolderName } = PaymentDetails;

        if (PaymentMethod === 'GPay') {
            return (
                <div>
                    <input type="text" name="upiId" value={upiId} onChange={handlePaymentDetailsChange} placeholder="UPI ID" />
                    <input type="tel" name="upiPhoneNumber" value={upiPhoneNumber} onChange={handlePaymentDetailsChange} placeholder="UPI Phone Number" />
                </div>
            );
        } else if (PaymentMethod === 'DebitCard' || PaymentMethod === 'CreditCard') {
            return (
                <div>
                    <input type="text" name="cardNumber" value={cardNumber} onChange={handlePaymentDetailsChange} placeholder="Card Number" />
                    <input type="text" name="expiryDate" value={expiryDate} onChange={handlePaymentDetailsChange} placeholder="Expiry Date" />
                    <input type="text" name="cvv" value={cvv} onChange={handlePaymentDetailsChange} placeholder="CVV" />
                    <input type="text" name="cardHolderName" value={cardHolderName} onChange={handlePaymentDetailsChange} placeholder="Card Holder Name" />
                </div>
            );
        }
        return null;
    };

    return (
        <div>
            <form onSubmit={handleSubmit}>
                <h2>Event Information</h2>
                <input type="text" name="YourEvent" value={formData.YourEvent} onChange={handleChange} placeholder="Your Event" />
                <input type="text" name="YourLocationForEvent" value={formData.YourLocationForEvent} onChange={handleChange} placeholder="Your Location For Event" />
                <input type="date" name="EventDate" value={formData.EventDate} onChange={handleChange} />
                <input type="time" name="StartTime" value={formData.StartTime} onChange={handleChange} />
                <input type="time" name="EndTime" value={formData.EndTime} onChange={handleChange} />
                <input type="number" name="ApproximateNumberOfAttendees" value={formData.ApproximateNumberOfAttendees} onChange={handleChange} placeholder="Approximate Number Of Attendees" />
                <input type="text" name="EventSetup" value={formData.EventSetup} onChange={handleChange} placeholder="Event Setup" />
                <input type="text" name="ColorTheme" value={formData.ColorTheme} onChange={handleChange} placeholder="Color Theme" />
                <input type="text" name="CateringServices" value={formData.CateringServices} onChange={handleChange} placeholder="Catering Services" />

                <h2>Contact Information</h2>
                <input type="text" name="Name" value={formData.Name} onChange={handleChange} placeholder="Name" />
                <input type="tel" name="Phone" value={formData.Phone} onChange={handleChange} placeholder="Phone" />
                <input type="tel" name="AlternatePhone" value={formData.AlternatePhone} onChange={handleChange} placeholder="Alternate Phone" />
                <input type="email" name="Email" value={formData.Email} onChange={handleChange} placeholder="Email" />
                <input type="text" name="Address" value={formData.Address} onChange={handleChange} placeholder="Address" />
                <input type="text" name="Place" value={formData.Place} onChange={handleChange} placeholder="Place" />

                <h2>Payment Information</h2>
                <select name="PaymentMethod" value={formData.PaymentMethod} onChange={handleChange}>
                    <option value="">Select Payment Method</option>
                    <option value="GPay">GPay</option>
                    <option value="DebitCard">Debit Card</option>
                    <option value="CreditCard">Credit Card</option>
                    <option value="UPI">UPI</option>
                </select>
                {renderPaymentDetails()}

                <button type="submit">Submit</button>
            </form>
        </div>
    );
}

export default Booking1;    const eventTypes = ['Marriage', 'Birthday', 'Engagement', 'Party'];
const setupStyles = ['Cocktail', 'Hollow Square', 'U-shape', 'Birthday', 'Reception', 'Award shows', 'Auditorium setup', 'Classroom', 'Mixed seating', 'Bachelor Party', 'Theater', 'Conferences', 'Lounge', 'Clusters', 'Chevron', 'Mixed seating', 'Garden', 'Ballroom', 'Beach', 'Rooftop', 'Banquet Hall', 'Conference Center', 'Auditorium', 'Party Hall'];
const cateringServices = ['No Catering', 'Full Service', 'Buffet', 'Food Stations', 'Plated Meal', 'Family Style'];
const colorThemes = ['Blue', 'Red', 'Green', 'Purple', 'Yellow', 'Orange', 'Pink', 'Black', 'Custom'];




// login.js
const User = require('./Userschema');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const login = async (req, res) => {
    const { Email, Password } = req.body;
    try {
        const user = await User.findOne({ Email });
        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }

        const validPassword = await bcrypt.compare(Password, user.Password);

        if (!validPassword) {
            return res.status(400).json({ error: "Invalid email or password" });
        }

        const token = jwt.sign({ id: user._id, isAdmin: user.isAdmin }, process.env.JWT_SECRET, {
            expiresIn: '1d'
        });

        res.json({ token });
    } catch (error) {
        console.error('Error in login:', error);
        res.status(500).json({ error: 'Internal Server Error', message: error.message });
    }
}

module.exports = login;



// signup.js

const User = require('./Userschema');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const tokengenerate = require('./Tokengeneration');

const signup = async (req, res) => {
    const { Name, Email, Password } = req.body;
    try {
        const user = await User.findOne({ Email });
        if (user) {
            return res.status(400).json({ error: "User already exists" });
        }

        // Hash the password before saving it to the database
        const hashedPassword = await bcrypt.hash(Password, 10); // 10 is the salt rounds
        const newUser = new User({ Name, Email, Password: hashedPassword });
        await newUser.save();

        // Generate token for the newly signed up user
        const token = tokengenerate(newUser._id);

        return res.status(201).json({
            id: newUser._id,
            Name: newUser.Name,
            Email: newUser.Email,
            Token: token
        });
    } catch (error) {
        console.error('Error in signup:', error);
        return res.status(500).json({ error: 'Internal Server Error', message: error.message });
    }
}

module.exports = signup;


const jwt=require('jsonwebtoken')

const protect=async(req,res,next)=>{

    let token;
    if(req.headers.authorization && req.headers.authorization.startsWith("Bearer")){
        try{
            token=req.headers.authorization.split(" ")[1];
            jwt.verify(token,process.env.JWT_SECRET)
            next();
        }
        catch(error)
        {
            res.status(401).send("NO TOKEN")
        }
    }
    if(!token)
    {
        res.status(401).send("NO TOKEN")
    }
}

module.exports=protect


const express = require('express');
const Createevent = require("../controller/Createevent");
const createuser3 = require('../controller/Tokengeneration');
const signup2 = require('../controller/Signuptoken');
const protect = require("../middleware/token");
const login = require('../controller/Login');

const router = express.Router();
const middleware = [protect];

router.post('/create', async (req, res) => {
    try {
        console.log('Incoming JSON data:', req.body);
        const result = await Createevent(req.body);
        res.status(201).json(result);
    } catch (error) {
        console.error('Error processing request:', error);
        res.status(500).json({ error: 'Internal Server Error', message: error.message });
    }
});

router.route('/verify').get(middleware, createuser3);
router.route('/signup').post(signup2);
router.route('/login').post(login);

module.exports = router;


const express = require("express");
const cors = require("cors");
const connection = require("./configuration/mongo");
const router = require("./router/testrouter");
const dotenv = require('dotenv');

require('dotenv').config();

const app = express();
connection();

app.use(express.json());
app.use(cors());
app.use('/', router);  

const PORT = process.env.PORT || 3000; // Get port from environment variable or default to 3000
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});



const Jwt = require('jsonwebtoken');

const tokengenerate = (id) => {
    const JWT_SECRET = process.env.JWT_SECRET;
    if (!JWT_SECRET) {
        throw new Error('JWT_SECRET is not defined');
    }
    return Jwt.sign({ id }, JWT_SECRET, {
        expiresIn: '1d'
    });
};

module.exports = tokengenerate; */


/* 




User
// eventschema.js
const mongoose = require("mongoose");

const capitalizeFirstLetter = (string) => {
    return string.charAt(0).toUpperCase() + string.slice(1);
};

const Eventschema = mongoose.Schema({
    YourEvent: {
        type: String,
        required: true,
    },
    YourLocationForEvent: {
        type: String,
        required: true,
    },
    EventDate: {
        type: Date,
        required: true,
    },
    StartTime: {
        type: Date,
        required: true,
    },
    EndTime: {
        type: Date,
        required: true,
    },
    ApproximateNumberOfAttendees: {
        type: Number,
        required: true,
    },
    EventSetup: {
        type: String,
        required: true,
        set: capitalizeFirstLetter,
    },
    ColorTheme: {
        type: String,
        required: true,
        set: capitalizeFirstLetter,
    },
    CateringServices: {
        type: String,
        required: true,
        set: capitalizeFirstLetter,
    },
    Name: {
        type: String,
        required: true,
    },
    Phone: {
        type: Number,
        required: true,
    },
    AlternatePhone: {
        type: Number,
        required: true,
    },
    Email: {
        type: String,
        required: true,
    },
    Address: {
        type: String,
        required: true,
    },
    Place: {
        type: String,
        required: true,
    },
    PaymentMethod: {
        type: String,
        required: true,
    },
    PaymentDetails: {
        type: Object,
        required: true,
    },
});

const Event = mongoose.model("Event", Eventschema);

module.exports = Event;
const Event = require("./Eventschema");

const parseTimeStringToDate = (timeString) => {
    const [hours, minutes] = timeString.replace(/[^0-9:]/g, '').split(':');
    return new Date().setHours(parseInt(hours, 10), parseInt(minutes || 0, 10), 0, 0);
};

const validatePaymentDetails = (PaymentMethod, PaymentDetails) => {
    if (PaymentMethod === 'GPay') {
        if (!PaymentDetails.upiId || !PaymentDetails.upiPhoneNumber) {
            throw new Error('Missing UPI ID or UPI phone number for GPay payment.');
        }
    } else if (PaymentMethod === 'DebitCard') {
        if (!PaymentDetails.cardNumber || !PaymentDetails.expiryDate || !PaymentDetails.cvv || !PaymentDetails.cardHolderName) {
            throw new Error('Missing required fields for DebitCard payment.');
        }
    } else if (PaymentMethod === 'CreditCard') {
        if (!PaymentDetails.cardNumber || !PaymentDetails.expiryDate || !PaymentDetails.cvv || !PaymentDetails.cardHolderName) {
            throw new Error('Missing required fields for CreditCard payment.');
        }
    } else if (PaymentMethod === 'UPI') {
        if (!PaymentDetails.upiId || !PaymentDetails.upiPhoneNumber) {
            throw new Error('Missing UPI ID or UPI phone number for UPI payment.');
        }
    }
};

const Createevent = async (requestData) => {
    try {
        const {
            YourEvent,
            YourLocationForEvent,
            EventDate,
            StartTime,
            EndTime,
            ApproximateNumberOfAttendees,
            EventSetup,
            ColorTheme,
            CateringServices,
            Name,
            Phone,
            AlternatePhone,
            Email,
            Address,
            Place,
            PaymentMethod,
            PaymentDetails
        } = requestData;

        if (!YourEvent || !YourLocationForEvent || !EventDate || !StartTime || !EndTime || !ApproximateNumberOfAttendees || !EventSetup || !ColorTheme || !CateringServices || !Name || !Phone || !AlternatePhone || !Email || !Address || !Place || !PaymentMethod || !PaymentDetails) {
            throw new Error('Missing required fields in the request.');
        }

        if (!['GPay', 'DebitCard', 'CreditCard', 'UPI'].includes(PaymentMethod)) {
            throw new Error('Invalid payment method.');
        }

        validatePaymentDetails(PaymentMethod, PaymentDetails);

        const startTime = parseTimeStringToDate(StartTime);
        const endTime = parseTimeStringToDate(EndTime);

        const Eventdetails = await Event.create({
            YourEvent,
            YourLocationForEvent,
            EventDate: new Date(EventDate), 
            StartTime: new Date(startTime),
            EndTime: new Date(endTime),
            ApproximateNumberOfAttendees,
            EventSetup,
            ColorTheme,
            CateringServices,
            Name,
            Phone,
            AlternatePhone,
            Email,
            Address,
            Place,
            PaymentMethod,
            PaymentDetails
        });

        return Eventdetails;
    } catch (error) {
        console.error('Error processing request:', error);
        throw error;
    }
};

module.exports = Createevent;
const Event = require("./Eventschema")



const deleteEvent = async(req,res) =>{
 const  getdd= req.params.id
    const eventid = await Event.findByIdAndDelete({_id:getdd})
    res.json(eventid)
}

module.exports=deleteEvent const Event = require("./Eventschema");

const updateevent = async (req, res) => {
    const { YourEvent,
        YourLocationForEvent,
        EventDate,
        StartTime,
        EndTime,
        ApproximateNumberOfAttendees,
        EventSetup,
        ColorTheme,
        CateringServices,
        Name,
        Phone,
        AlternatePhone,
        Email,
        Address,
        Place,
        PaymentMethod,
        PaymentDetails } = req.body;
    const _id = req.params.id
    const Eventupdate = await Event.findByIdAndUpdate(_id, {
        YourEvent,
        YourLocationForEvent,
        EventDate,
        StartTime,
        EndTime,
        ApproximateNumberOfAttendees,
        EventSetup,
        ColorTheme,
        CateringServices,
        Name,
        Phone,
        AlternatePhone,
        Email,
        Address,
        Place,
        PaymentMethod,
        PaymentDetails
    })
    res.json(Eventupdate)
}
module.exports = updateeventconst Event = require("./Eventschema")


const geteventid = async (req,res)=>{
    const getidevent = req.params.id
    const Eventid = await Event.findById({_id:getidevent})
    res.json(Eventid)
}

module.exports = geteventid const Event = require("./Eventschema")


const geteventdetails = async (req,res) =>{
    const getevent = await Event.find()
    res.json(getevent)
}

module.exports = geteventdetailsconst User = require('./Userschema');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const login = async (req, res) => {
    const { Username, Password } = req.body;
    try {
        const user = await User.findOne({ Username });
        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }

        const validPassword = await bcrypt.compare(Password, user.Password);

        if (!validPassword) {
            return res.status(400).json({ error: "Invalid username or password" });
        }

        // Determine user role
        const role = user.isAdmin ? 'admin' : 'user';

        // Generate token
        const token = jwt.sign({ id: user._id, isAdmin: user.isAdmin }, process.env.JWT_SECRET, {
            expiresIn: '1d'
        });

        // Send response with role information and token
        res.json({ role, token });
    } catch (error) {
        console.error('Error in login:', error);
        res.status(500).json({ error: 'Internal Server Error', message: error.message });
    }
}

module.exports = login;
// signup.js (backend)
const User = require('./Userschema');
const bcrypt = require('bcrypt');
const tokengenerate = require('./Tokengeneration');

const signup = async (req, res) => {
    const { Name, Username, Email, Password, AdhaarNumber, PhoneNumber, Place } = req.body;
    try {
        if (!Username || !Email) {
            return res.status(400).json({ error: "Username and Email are required" });
        }

        // Check if the username or email already exists
        const existingUser = await User.findOne({ $or: [{ Username }, { Email }] });
        if (existingUser) {
            return res.status(400).json({ error: "Username or Email already exists" });
        }

        // Hash the password before saving it to the database
        const hashedPassword = await bcrypt.hash(Password, 10); // 10 is the salt rounds
        const newUser = new User({ Name, Username, Email, Password: hashedPassword, AdhaarNumber, PhoneNumber, Place });
        await newUser.save();

        // Generate token for the newly signed up user
        const token = tokengenerate(newUser._id);

        return res.status(201).json({
            id: newUser._id,
            Name: newUser.Name,
            Username: newUser.Username,
            Email: newUser.Email,
            Token: token
        });
    } catch (error) {
        console.error('Error in signup:', error);
        return res.status(500).json({ error: 'Internal Server Error', message: error.message });
    }
}

module.exports = signup;
const Jwt = require('jsonwebtoken');

const tokengenerate = (id) => {
    const JWT_SECRET = process.env.JWT_SECRET;
    if (!JWT_SECRET) {
        throw new Error('JWT_SECRET is not defined');
    }
    return Jwt.sign({ id }, JWT_SECRET, {
        expiresIn: '1d'
    });
};

module.exports = tokengenerate;
// userschema.js
const mongoose = require("mongoose")

const userSchema = mongoose.Schema({
    Name: { type: String },
    Username: { type: String, unique: true },
    Email: { type: String, unique: true },
    Password: { type: String },
    AdhaarNumber: { type: String }, // New field
    PhoneNumber: { type: String },   // New field
    Place: { type: String },         // New field
    isAdmin: { type: Boolean, default: false }
})

const User = mongoose.model("User", userSchema)

module.exports = User;
const jwt=require('jsonwebtoken')

const protect=async(req,res,next)=>{

    let token;
    if(req.headers.authorization && req.headers.authorization.startsWith("Bearer")){
        try{
            token=req.headers.authorization.split(" ")[1];
            jwt.verify(token,process.env.JWT_SECRET)
            next();
        }
        catch(error)
        {
            res.status(401).send("NO TOKEN")
        }
    }
    if(!token)
    {
        res.status(401).send("NO TOKEN")
    }
}

module.exports=protectconst express = require('express');
const Createevent = require("../controller/Createevent");
const createuser3 = require('../controller/Tokengeneration');
const signup2 = require('../controller/Signuptoken');
const protect = require("../middleware/token");
const login = require('../controller/Login');
const geteventdetails = require('../controller/getevents');
const geteventid = require('../controller/geteventbyid');
const updateevent = require('../controller/editbooking');
const deleteEvent = require('../controller/deletebooking');

const router = express.Router();
const middleware = [protect];

router.post('/create', async (req, res) => {
    try {
        console.log('Incoming JSON data:', req.body);
        const result = await Createevent(req.body);
        res.status(201).json(result);
    } catch (error) {
        console.error('Error processing request:', error);
        res.status(500).json({ error: 'Internal Server Error', message: error.message });
    }
});

router.route('/verify').get(middleware, createuser3);
router.route('/signup').post(signup2);
router.route('/login').post(login);
router.route('/getevent').get(geteventdetails)
 router.route("/getbyid/:id").get(geteventid);
router.route("/editbooking/:id").put(updateevent);
router.route("/deletebooking/:id").delete(deleteEvent);






module.exports = router;
const express = require("express");
const cors = require("cors");
const connection = require("./configuration/mongo");
const router = require("./router/testrouter");
const dotenv = require('dotenv');

require('dotenv').config();

// Import initialize function
const initialize = require("./controller/initialize"); // Change to 'controller'

// Create Express app
const app = express();

// Connect to MongoDB
connection();

// Middleware
app.use(express.json());
app.use(cors());

// Route handling
app.use('/', router);

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
    console.log(`Server is running on port ${PORT}`);
    
    // Initialize admin user when the server starts
    try {
        await initialize.createAdmin();
        console.log('Admin initialization successful.');
    } catch (error) {
        console.error('Error initializing admin:', error);
    }
});
 these are my backend code now i will provide my front end and then you can start explaining

  */

/* 


  import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

function Admin1() {
  const [events, setEvents] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    // Fetch events data from the server
    const fetchEvents = async () => {
      try {
        const response = await axios.get('http://localhost:3000/getevent'); // Adjust the endpoint according to your API
        setEvents(response.data);
      } catch (error) {
        console.error('Error fetching events:', error);
      }
    };

    fetchEvents();
  }, []);

  const handleEdit = (id) => {
    // Navigate to the edit page with the event ID
    navigate(`/edit/${id}`);
  };

  const handleDelete = async (id) => {
    // Handle delete functionality
    try {
      await axios.delete(`http://localhost:3000/deletebooking/${id}`); // Adjust the endpoint according to your API
      setEvents(events.filter(event => event._id !== id));
      console.log('Event deleted successfully');
    } catch (error) {
      console.error('Error deleting event:', error);
    }
  };

  return (
    <div>
      <h1>Event List</h1>
      <table>
        <thead>
          <tr>
            <th>Event</th>
            <th>Location</th>
            <th>Date</th>
            <th>Start Time</th>
            <th>End Time</th>
            <th>Approximate Number of Attendees</th>
            <th>Event Setup</th>
            <th>Color Theme</th>
            <th>Catering Services</th>
            <th>Name</th>
            <th>Phone</th>
            <th>Alternate Phone</th>
            <th>Email</th>
            <th>Address</th>
            <th>Place</th>
            <th>Payment Method</th>
            <th>Card Type</th>
            <th>Card Number</th>
            <th>Expiry Date</th>
            <th>CVV</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {events.map(event => (
            <tr key={event._id}>
              <td>{event.YourEvent}</td>
              <td>{event.YourLocationForEvent}</td>
              <td>{event.EventDate}</td>
              <td>{event.StartTime}</td>
              <td>{event.EndTime}</td>
              <td>{event.ApproximateNumberOfAttendees}</td>
              <td>{event.EventSetup}</td>
              <td>{event.ColorTheme}</td>
              <td>{event.CateringServices}</td>
              <td>{event.Name}</td>
              <td>{event.Phone}</td>
              <td>{event.AlternatePhone}</td>
              <td>{event.Email}</td>
              <td>{event.Address}</td>
              <td>{event.Place}</td>
              <td>{event.PaymentMethod}</td>
              <td>{event.PaymentDetails.cardType}</td>
              <td>{event.PaymentDetails.cardNumber}</td>
              <td>{event.PaymentDetails.expiryDate}</td>
              <td>{event.PaymentDetails.cvv}</td>
              <td>
                <button onClick={() => handleEdit(event._id)}>Edit</button>
                <button onClick={() => handleDelete(event._id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Admin1; */


